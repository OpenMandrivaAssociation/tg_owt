diff -up tg_owt-afd9d5d31798d3eacf9ed6c30601e91d0f1e4d60/src/modules/video_coding/codecs/h264/h264_decoder_impl.cc.omv~ tg_owt-afd9d5d31798d3eacf9ed6c30601e91d0f1e4d60/src/modules/video_coding/codecs/h264/h264_decoder_impl.cc
--- tg_owt-afd9d5d31798d3eacf9ed6c30601e91d0f1e4d60/src/modules/video_coding/codecs/h264/h264_decoder_impl.cc.omv~	2024-04-06 19:50:55.293831068 +0200
+++ tg_owt-afd9d5d31798d3eacf9ed6c30601e91d0f1e4d60/src/modules/video_coding/codecs/h264/h264_decoder_impl.cc	2024-04-06 19:51:26.942123053 +0200
@@ -212,7 +212,6 @@ int H264DecoderImpl::AVGetBuffer2(AVCode
   int total_size = y_size + 2 * uv_size;
 
   av_frame->format = context->pix_fmt;
-  av_frame->reordered_opaque = context->reordered_opaque;
 
   // Create a VideoFrame object, to keep a reference to the buffer.
   // TODO(nisse): The VideoFrame's timestamp and rotation info is not used.
@@ -361,7 +360,6 @@ int32_t H264DecoderImpl::Decode(const En
   }
   packet->size = static_cast<int>(input_image.size());
   int64_t frame_timestamp_us = input_image.ntp_time_ms_ * 1000;  // ms -> Î¼s
-  av_context_->reordered_opaque = frame_timestamp_us;
 
   int result = avcodec_send_packet(av_context_.get(), packet.get());
 
@@ -378,10 +376,6 @@ int32_t H264DecoderImpl::Decode(const En
     return WEBRTC_VIDEO_CODEC_ERROR;
   }
 
-  // We don't expect reordering. Decoded frame timestamp should match
-  // the input one.
-  RTC_DCHECK_EQ(av_frame_->reordered_opaque, frame_timestamp_us);
-
   // TODO(sakal): Maybe it is possible to get QP directly from FFmpeg.
   h264_bitstream_parser_.ParseBitstream(input_image);
   absl::optional<int> qp = h264_bitstream_parser_.GetLastSliceQp();
